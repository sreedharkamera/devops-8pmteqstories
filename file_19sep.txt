import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class YourClassNameTest {

    @Mock
    private Config config;  // Mock your config class

    @InjectMocks
    private YourClassName classUnderTest;  // Replace with your actual class name

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);  // Initialize mocks
    }

    @Test
    public void testGetCurrentDateForFolderName() {
        // Arrange
        String businessDate = "2023-09-18 12:34:56.789";
        String region = "US";
        String targetSubFolderPath = "/export/subfolder/";

        // Mock the config behavior
        when(config.getTargetExportSubFolderPath(region)).thenReturn(targetSubFolderPath);

        // DateTimeFormatter setup
        DateTimeFormatter inputDateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
        LocalDateTime dateTime = LocalDateTime.parse(businessDate, inputDateFormatter);
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyyMMdd");
        String formattedDate = dateTime.format(dateFormatter);

        // Calculate expected millis
        long expectedMillis = dateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();

        // Expected result
        String expectedFormattedBusinessDate = targetSubFolderPath + formattedDate + "-" + expectedMillis;

        // Act
        String result = classUnderTest.getCurrentDateForFolderName(businessDate, region);

        // Assert
        assertEquals(expectedFormattedBusinessDate, result);
    }

    @Test
    public void testGetCurrentDateForFolderName_InvalidDateFormat() {
        // Arrange
        String businessDate = "Invalid Date";
        String region = "US";
        String targetSubFolderPath = "/export/subfolder/";

        when(config.getTargetExportSubFolderPath(region)).thenReturn(targetSubFolderPath);

        // Act & Assert
        assertThrows(DateTimeParseException.class, () -> {
            classUnderTest.getCurrentDateForFolderName(businessDate, region);
        });
    }
}
