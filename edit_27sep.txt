import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

class EditRecordControllerTest {

    @InjectMocks
    private EditRecordController editRecordController;

    @Mock
    private Context mockContext;

    @Mock
    private PageModel mockPageModel;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testPreparePageModel_successfulExecution() throws PluginException {
        // Arrange
        when(mockContext.getServletRequest().getParameter("itemId")).thenReturn("123");
        when(mockContext.getServletRequest().getParameter("recordId")).thenReturn("456");
        when(mockContext.getServletRequest().getParameter("recordType")).thenReturn("TypeA");
        when(mockContext.getServletRequest().getParameter("recordAction")).thenReturn("Submitted");

        // Act
        editRecordController.preparePageModel(mockContext, mockPageModel);

        // Assert
        verify(mockPageModel).setTitle("Edit Record");
        verify(mockPageModel).setValue("AlertId", "123");
    }

    @Test
    void testPreparePageModel_forwardToExceptionPage_onException() throws PluginException {
        // Arrange
        when(mockContext.getServletRequest().getParameter("itemId")).thenReturn("123");
        when(mockContext.getServletRequest().getParameter("recordAction")).thenThrow(new RuntimeException("Test Exception"));

        Map<String, Object> params = new HashMap<>();
        params.put("Exception_MESSAGE", "Test Exception");

        // Act
        editRecordController.preparePageModel(mockContext, mockPageModel);

        // Assert
        verify(mockContext).forward(eq("RecordDetailsExtention"), eq("RecordDeatailsExceptionPage"), eq(params));
    }

    @Test
    void testPreparePageModel_updateFlagSetOnCertainActions() throws PluginException {
        // Arrange
        when(mockContext.getServletRequest().getParameter("itemId")).thenReturn("123");
        when(mockContext.getServletRequest().getParameter("recordId")).thenReturn("456");
        when(mockContext.getServletRequest().getParameter("recordType")).thenReturn("TypeA");
        when(mockContext.getServletRequest().getParameter("recordAction")).thenReturn("Copied");

        // Mock any necessary dependencies for updateFlagBulkUpdateOperation if needed

        // Act
        editRecordController.preparePageModel(mockContext, mockPageModel);

        // Assert
        verify(mockPageModel).setTitle("Edit Record");
        verify(mockPageModel).setValue("AlertId", "123");
        // Additional asserts for updateFlag logic
    }

    // Additional tests can be added for other recordAction values like "Cancelled", "Downloaded", etc.
}
