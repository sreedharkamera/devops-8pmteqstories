

public class IndividualTest {

    @Test
    public void testGettersAndSetters() {
        Individual individual = new Individual();
        
        individual.setRECORD_ID(1);
        assertEquals(1, individual.getRECORD_ID());

        individual.setRECORD_NUMBER(2);
        assertEquals(2, individual.getRECORD_NUMBER());

        individual.setSP_ITEM_ID("SP123");
        assertEquals("SP123", individual.getSP_ITEM_ID());

        individual.setRECORD_TYPE("TypeA");
        assertEquals("TypeA", individual.getRECORD_TYPE());

        individual.setTRACKING_NUMBER("TRACK123");
        assertEquals("TRACK123", individual.getTRACKING_NUMBER());

        individual.setLAST_NAME("Doe");
        assertEquals("Doe", individual.getLAST_NAME());

        individual.setFIRST_NAME("John");
        assertEquals("John", individual.getFIRST_NAME());

        individual.setMIDDLE_NAME("M");
        assertEquals("M", individual.getMIDDLE_NAME());

        individual.setSEARCH_START_DATE("2023-01-01");
        assertEquals("2023-01-01", individual.getSEARCH_START_DATE());

        individual.setSEARCH_END_DATE("2023-12-31");
        assertEquals("2023-12-31", individual.getSEARCH_END_DATE());

        individual.setSUFFIX("Jr.");
        assertEquals("Jr.", individual.getSUFFIX());

        individual.setID("ID123");
        assertEquals("ID123", individual.getID());

        individual.setTIN_SSN_NUMBER("123-45-6789");
        assertEquals("123-45-6789", individual.getTIN_SSN_NUMBER());

        individual.setDATE_OF_BIRTH("2000-01-01");
        assertEquals("2000-01-01", individual.getDATE_OF_BIRTH());

        individual.setSTREET("123 Main St");
        assertEquals("123 Main St", individual.getSTREET());

        individual.setCITY("Anytown");
        assertEquals("Anytown", individual.getCITY());

        individual.setSTATE("CA");
        assertEquals("CA", individual.getSTATE());

        individual.setZIP("12345");
        assertEquals("12345", individual.getZIP());

        individual.setCOUNTRY("USA");
        assertEquals("USA", individual.getCOUNTRY());

        individual.setPHONE("123-456-7890");
        assertEquals("123-456-7890", individual.getPHONE());

        individual.setEMAIL("john.doe@example.com");
        assertEquals("john.doe@example.com", individual.getEMAIL());

        individual.setRECORD_DATE("2023-01-01");
        assertEquals("2023-01-01", individual.getRECORD_DATE());

        individual.setRECORD_COUNT(1);
        assertEquals(1, individual.getRECORD_COUNT());

        individual.setRECORD_STATUS("Active");
        assertEquals("Active", individual.getRECORD_STATUS());

        individual.setPROCESS_START_TIME("10:00 AM");
        assertEquals("10:00 AM", individual.getPROCESS_START_TIME());

        individual.setPROCESS_END_TIME("11:00 AM");
        assertEquals("11:00 AM", individual.getPROCESS_END_TIME());

        individual.setROW_NUMBER(1);
        assertEquals(1, individual.getROW_NUMBER());

        individual.setRECORD_ID_FLAG(true);
        assertTrue(individual.isRECORD_ID_FLAG());

        individual.setSEARCH_TERM("SearchTerm");
        assertEquals("SearchTerm", individual.getSEARCH_TERM());

        individual.setHIST_SEARCH_TERM_WLDCRD("WildCard");
        assertEquals("WildCard", individual.getHIST_SEARCH_TERM_WLDCRD());

        individual.setHIST_SEARCH_TERM_UNDRSCR("Underscore");
        assertEquals("Underscore", individual.getHIST_SEARCH_TERM_UNDRSCR());

        individual.setHIST_SEARCH_TERM_EXACT("ExactMatch");
        assertEquals("ExactMatch", individual.getHIST_SEARCH_TERM_EXACT());
    }

    @Test
    public void testEqualsAndHashCode() {
        Individual individual1 = new Individual();
        Individual individual2 = new Individual();

        individual1.setRECORD_ID(1);
        individual2.setRECORD_ID(1);

        assertEquals(individual1, individual2);
        assertEquals(individual1.hashCode(), individual2.hashCode());

        individual2.setLAST_NAME("Doe");
        individual1.setLAST_NAME("Doe");

        assertEquals(individual1, individual2);
        assertEquals(individual1.hashCode(), individual2.hashCode());

        individual2.setFIRST_NAME("Jane");
        individual1.setFIRST_NAME("John");

        assertNotEquals(individual1, individual2);
        assertNotEquals(individual1.hashCode(), individual2.hashCode());
    }

    @Test
    public void testToString() {
        Individual individual = new Individual();
        individual.setRECORD_ID(1);
        individual.setFIRST_NAME("John");
        individual.setLAST_NAME("Doe");

        String expectedString = "Individual [RECORD_ID=1, RECORD_NUMBER=1, SP_ITEM_ID=null, RECORD_TYPE=null, " +
                "TRACKING_NUMBER=, LAST_NAME=Doe, FIRST_NAME=John, MIDDLE_NAME=, SEARCH_START_DATE=null, " +
                "SEARCH_END_DATE=null, SUFFIX=null, ID=null, TIN_SSN_NUMBER=null, DATE_OF_BIRTH=null, " +
                "STREET=null, CITY=null, STATE=null, ZIP=null, COUNTRY=null, PHONE=null, EMAIL=null, " +
                "RECORD_DATE=null, RECORD_COUNT=0, RECORD_STATUS=null, PROCESS_START_TIME=null, " +
                "PROCESS_END_TIME=null, ROW_NUMBER=0, RECORD_ID_FLAG=false, SEARCH_TERM=null, " +
                "HIST_SEARCH_TERM_WLDCRD=null, HIST_SEARCH_TERM_UNDRSCR=null, HIST_SEARCH_TERM_EXACT=null]";

        assertEquals(expectedString, individual.toString());
    }
}
