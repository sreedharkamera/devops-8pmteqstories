

public class VesselTest {

    @Test
    public void testGettersAndSetters() {
        Vessel vessel = new Vessel();
        
        vessel.setRECORD_ID(1);
        assertEquals(1, vessel.getRECORD_ID());

        vessel.setRECORD_NUMBER(2);
        assertEquals(2, vessel.getRECORD_NUMBER());

        vessel.setRECORD_TYPE("TypeA");
        assertEquals("TypeA", vessel.getRECORD_TYPE());

        vessel.setTRACKING_NUMBER("TRACK123");
        assertEquals("TRACK123", vessel.getTRACKING_NUMBER());

        vessel.setSEARCH_START_DATE("2023-01-01");
        assertEquals("2023-01-01", vessel.getSEARCH_START_DATE());

        vessel.setSEARCH_END_DATE("2023-12-31");
        assertEquals("2023-12-31", vessel.getSEARCH_END_DATE());

        vessel.setVESSEL_NAME("VesselName");
        assertEquals("VesselName", vessel.getVESSEL_NAME());

        vessel.setVESSEL_NUMBER("VesselNumber");
        assertEquals("VesselNumber", vessel.getVESSEL_NUMBER());

        vessel.setRECORD_DATE("2023-01-01");
        assertEquals("2023-01-01", vessel.getRECORD_DATE());

        vessel.setRECORD_STATUS("Active");
        assertEquals("Active", vessel.getRECORD_STATUS());

        vessel.setRECORD_COUNT(1);
        assertEquals(1, vessel.getRECORD_COUNT());

        vessel.setPROCESS_START_TIME("10:00 AM");
        assertEquals("10:00 AM", vessel.getPROCESS_START_TIME());

        vessel.setPROCESS_END_TIME("11:00 AM");
        assertEquals("11:00 AM", vessel.getPROCESS_END_TIME());

        vessel.setRECORD_ID_FLAG(true);
        assertTrue(vessel.isRECORD_ID_FLAG());

        vessel.setSEARCH_TERM("SearchTerm");
        assertEquals("SearchTerm", vessel.getSEARCH_TERM());

        vessel.setHIST_SEARCH_TERM_WLDCRD("WildCard");
        assertEquals("WildCard", vessel.getHIST_SEARCH_TERM_WLDCRD());

        vessel.setHIST_SEARCH_TERM_UNDRSCR("Underscore");
        assertEquals("Underscore", vessel.getHIST_SEARCH_TERM_UNDRSCR());

        vessel.setHIST_SEARCH_TERM_EXACT("ExactMatch");
        assertEquals("ExactMatch", vessel.getHIST_SEARCH_TERM_EXACT());
    }

    @Test
    public void testEqualsAndHashCode() {
        Vessel vessel1 = new Vessel();
        Vessel vessel2 = new Vessel();

        vessel1.setRECORD_ID(1);
        vessel2.setRECORD_ID(1);

        assertEquals(vessel1, vessel2);
        assertEquals(vessel1.hashCode(), vessel2.hashCode());

        vessel2.setVESSEL_NAME("VesselName");
        vessel1.setVESSEL_NAME("VesselName");

        assertEquals(vessel1, vessel2);
        assertEquals(vessel1.hashCode(), vessel2.hashCode());

        vessel2.setVESSEL_NUMBER("VesselNumber");
        vessel1.setVESSEL_NUMBER("DifferentNumber");

        assertNotEquals(vessel1, vessel2);
        assertNotEquals(vessel1.hashCode(), vessel2.hashCode());
    }

    @Test
    public void testToString() {
        Vessel vessel = new Vessel();
        vessel.setRECORD_ID(1);
        vessel.setVESSEL_NAME("VesselName");
        vessel.setVESSEL_NUMBER("VesselNumber");

        String expectedString = "Vessel [RECORD_ID=1, RECORD_NUMBER=1, RECORD_TYPE=null, TRACKING_NUMBER=, " +
                "SEARCH_START_DATE=null, SEARCH_END_DATE=null, VESSEL_NAME=VesselName, VESSEL_NUMBER=VesselNumber, " +
                "RECORD_DATE=null, RECORD_STATUS=null, RECORD_COUNT=0, PROCESS_START_TIME=null, PROCESS_END_TIME=null, " +
                "RECORD_ID_FLAG=false, SEARCH_TERM=null, HIST_SEARCH_TERM_WLDCRD=null, HIST_SEARCH_TERM_UNDRSCR=null, " +
                "HIST_SEARCH_TERM_EXACT=null]";

        assertEquals(expectedString, vessel.toString());
    }
}
